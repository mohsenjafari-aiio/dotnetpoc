// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using aiio.Infrastructure.Persistence;

#nullable disable

namespace aiio.Infrastructure.Migrations
{
    [DbContext(typeof(AiioDbContext))]
    partial class AiioDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DepartmentProcess", b =>
                {
                    b.Property<Guid>("DepartmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcessesId")
                        .HasColumnType("uuid");

                    b.HasKey("DepartmentsId", "ProcessesId");

                    b.HasIndex("ProcessesId");

                    b.ToTable("DepartmentProcess");
                });

            modelBuilder.Entity("LocationProcess", b =>
                {
                    b.Property<Guid>("LocationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcessesId")
                        .HasColumnType("uuid");

                    b.HasKey("LocationsId", "ProcessesId");

                    b.HasIndex("ProcessesId");

                    b.ToTable("LocationProcess");
                });

            modelBuilder.Entity("ProcessResource", b =>
                {
                    b.Property<Guid>("ProcessesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourcesId")
                        .HasColumnType("uuid");

                    b.HasKey("ProcessesId", "ResourcesId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("ProcessResource");
                });

            modelBuilder.Entity("ProcessRole", b =>
                {
                    b.Property<Guid>("ProcessesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uuid");

                    b.HasKey("ProcessesId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("ProcessRole");
                });

            modelBuilder.Entity("aiio.Domain.Models.Departments.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("aiio.Domain.Models.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("aiio.Domain.Models.Processes.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Processes", (string)null);
                });

            modelBuilder.Entity("aiio.Domain.Models.Resources.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Resources", (string)null);
                });

            modelBuilder.Entity("aiio.Domain.Models.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("aiio.Domain.Models.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DepartmentProcess", b =>
                {
                    b.HasOne("aiio.Domain.Models.Departments.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("aiio.Domain.Models.Processes.Process", null)
                        .WithMany()
                        .HasForeignKey("ProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocationProcess", b =>
                {
                    b.HasOne("aiio.Domain.Models.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("aiio.Domain.Models.Processes.Process", null)
                        .WithMany()
                        .HasForeignKey("ProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProcessResource", b =>
                {
                    b.HasOne("aiio.Domain.Models.Processes.Process", null)
                        .WithMany()
                        .HasForeignKey("ProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("aiio.Domain.Models.Resources.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProcessRole", b =>
                {
                    b.HasOne("aiio.Domain.Models.Processes.Process", null)
                        .WithMany()
                        .HasForeignKey("ProcessesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("aiio.Domain.Models.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("aiio.Domain.Models.Departments.Department", b =>
                {
                    b.HasOne("aiio.Domain.Models.Users.User", "CreatedBy")
                        .WithMany("Departments")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("aiio.Domain.Models.Locations.Location", b =>
                {
                    b.HasOne("aiio.Domain.Models.Users.User", "CreatedBy")
                        .WithMany("Locations")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("aiio.Domain.Models.Processes.Process", b =>
                {
                    b.HasOne("aiio.Domain.Models.Users.User", "CreatedBy")
                        .WithMany("Processes")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("aiio.Domain.Models.Resources.Resource", b =>
                {
                    b.HasOne("aiio.Domain.Models.Users.User", "CreatedBy")
                        .WithMany("Resources")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("aiio.Domain.Models.Roles.Role", b =>
                {
                    b.HasOne("aiio.Domain.Models.Users.User", "CreatedBy")
                        .WithMany("Roles")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("aiio.Domain.Models.Users.User", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Locations");

                    b.Navigation("Processes");

                    b.Navigation("Resources");

                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
